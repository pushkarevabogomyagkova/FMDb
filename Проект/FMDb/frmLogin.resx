<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAGgFAABoBQAAAAAAAAAA
        AAD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8AsLCwALCwsACwsLAAr6+vAMLCwgCPj49JMDAwlBYWFp0ZGRmcGRkZnBkZ
        GZwZGRmcGRkZnBkZGZwZGRmcGRkZnBkZGZwZGRmcGRkZnBkZGZwZGRmcFhYWnScnJ5iGhoZczs7OANfX
        1wD///8A////AP///wD///8A////AP///wCxsbEAsbGxALGxsQC1tbUAqKioJjs7O8EJCQn7AwMD/wQE
        BP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8EBAT/BAQE/wQEBP8DAwP/BwcH/i4u
        LtSmpqY93NzcAP///wD///8A////AP///wD///8A////AMHBwQDBwcEAwsLCAMLCwgotLS3WAAAA/wAA
        AP8JCQn6CQkJ+gkJCfoJCQn6CQkJ+gkJCfoJCQn6CQkJ+gkJCfoJCQn6CQkJ+gkJCfoJCQn6CQkJ+gkJ
        CfoBAQH/AAAA/xUVFfGoqKgt////AP///wD///8A////AP///wD///8Aq6urAKurqwCwsLAAjIyMPwAA
        AP8MDAz2i4uLUGNjYxxWVlYcWFhYHFdXVxxXV1ccV1dXHFdXVxxXV1ccV1dXHFdXVxxXV1ccV1dXHFdX
        VxxXV1ccVVVVHJSUlDofHx/nAAAA/1xcXID///8A////AP///wD///8A////AP///wCzs7MAs7OzALq6
        ugCIiIhTAAAA/yEhIeCqqqoAeHh4AFNTUwBVVVUAWVlZAFtbWwBbW1sAW1tbAFtbWwBbW1sAW1tbAFtb
        WwBbW1sAW1tbAFNTUwB4eHgA3NzcAEZGRroAAAD/PT09k////wD///8A////AP///wD///8A////ALGx
        sQCxsbEAuLi4AIiIiFEAAAD/ICAg4aWlpQaioqIAjo6OAIaGhgBfX18AVFRUAFhYWABaWloAWlpaAFpa
        WgBaWloAWlpaAFpaWgBTU1MAeHh4AM/PzwDc3NwAQkJCvQAAAP8/Pz+S////AP///wD///8A////AP//
        /wD///8AsrKyALKysgC5ubkAiYmJUQAAAP8gICDhoqKiBrCwsADExMQA0tLSAMjIyACPj48AZGRkAFRU
        VABWVlYAWlpaAFpaWgBaWloAUlJSAHh4eADPz88A09PTANnZ2QBCQkK9AAAA/z8/P5L///8A////AP//
        /wD///8A////AP///wCxsbEAsrKyALm5uQCJiYlRAAAA/yAgIOGioqIGz8/PAL29vQ/MzMwE2NjYAMTE
        xAC4uLgAnp6eAHJycgBWVlYAU1NTAFBQUAB4eHgAz8/PANPT0wDQ0NAA2dnZAEJCQr0AAAD/Pz8/kv//
        /wD///8A////AP///wD///8A////ALa2tgC0tLQAubm5AIaGhlUAAAD/GBgY7KKiogStra0FLi4u2D09
        PcTIyMgVxMTEALq6ugDHx8cAycnJALCwsACHh4cAi4uLAMvLywDT09MA0NDQANDQ0ADZ2dkAQkJCvQAA
        AP8/Pz+S////AP///wD///8A////AP///wD///8A1tbWAK6urgDFxcUAq6urNENDQ6VgYGCQubm5AW1t
        bRAODg7wAAAA/ykpKdmrq6smw8PDAMHBwQDGxsYAzMzMANbW1gDj4+MA0dHRAM/PzwDQ0NAA0NDQANnZ
        2QBCQkK9AAAA/z8/P5L///8A////AP///wD///8A////AP///wDb29sAnJycAJycnAC6uroAnJycAKmp
        qQCsrKwAampqCBISEuwAAAD/AAAA/xwcHOmbm5s8zc3NAMbGxgDIyMgAz8/PAN/f3wDU1NQAzs7OAM/P
        zwDPz88A2NjYAEJCQr0AAAD/Pz8/kv///wD///8A////AP///wD///8A////ANjY2AZ8fHxHaWlpTGtr
        a0xubm5MbW1tTG1tbUtlZWVYDg4O8gAAAP8AAAD/AAAA/w0NDfePj49a0tLSAMjIyADPz88A3t7eANvb
        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
        3ABCQkK9AAAA/z8/P5L///8A////AP///wD///8A////AP///wCysrIAsrKyALq6ugCIiIhTAAAA/yIi
        IuCqqqoAfHx8AFlZWQBaWloAXl5eAGBgYABgYGAAYGBgAGBgYABgYGAAYGBgAGBgYABgYGAAYGBgAFlZ
        WQB8fHwA29vbAEdHR7oAAAD/Pj4+lP///wD///8A////AP///wD///8A////AKurqwCrq6sAsbGxAIuL
        iz8AAAD/DAwM9YyMjFFnZ2cdWlpaHVxcXB1cXFwdXFxcHVxcXB1cXFwdXFxcHVxcXB1cXFwdXFxcHVxc
        XB1cXFwdXFxcHVNTUx2BgYE5ISEh5wAAAP9YWFiA////AP///wD///8A////AP///wD///8AxsbGAMbG
        xgDIyMgAycnJCi8vL9gAAAD/AAAA/woKCvoJCQn6CQkJ+gkJCfoJCQn6CQkJ+gkJCfoJCQn6CQkJ+gkJ
        CfoJCQn6CQkJ+gkJCfoJCQn6CgoK+gEBAf8AAAD/FhYW8aqqqi3///8A////AP///wD///8A////AP//
        /wDe3t4A3t7eAN7e3gDk5OQAsbGxKDc3N8MHBwf/AgIC/wICAv8CAgL/AgIC/wICAv8CAgL/AgIC/wIC
        Av8CAgL/AgIC/wICAv8CAgL/AgIC/wICAv8CAgL/BQUF/ywsLNakpKQ/2dnZAP///wD///8A////AP//
        /wD///8A////AN7e3gDe3t4A3t7eAODg4ADIyMgAm5ubO0FBQZEdHR2cISEhmyEhIZshISGbISEhmyEh
        IZshISGbISEhmyEhIZshISGbISEhmyEhIZshISGbISEhmx0dHZw0NDSWk5OTTs3NzQDS0tIA////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP///wD///8A////AP//
        /wD///8A////AP///wD///8A//////4AAD/8AAAf+AAAD/gAAA/4//+P+H//j/h//4/4T/+P+Af/j/gD
        /4//gf+PwAD/j8AAf4/AAD+PwAAPj8AAD4/AAD+PwAB/j8AA/4//gf+P+AP/j/gH/4/4T/+P+H//j/h/
        /4/4//+P+AAAD/gAAA/8AAAf/gAAP/////8=
</value>
  </data>
</root>