<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOgCAADoAgAAAAAAAAAA
        AAC9ubQqvbm0Dr25tA69ubQOvbm0Dr+7tg7Dv7oOwb24DbWxrAmloZwBhYF8GGtnYU1KRkGGLysnwiEd
        GukfGxb1HxsW8yEdGektKCTDRD87i2VhXFCDf3sbpqKdArOvqgjAvLcNxMC7Dr+7tg69ubQOvbm0Dr25
        tA69ubQOvbm0Hb25tBu9ubQAv7u2AL+7tgDBvbgAtrKtAJiUjwBiXlkATEhEEywoI3oNCQTfBQEA/wYC
        AP8IBAD/CgYB/wsHAv8LBwL/CgYB/wkFAP8HAwD/BgIA/w0JBOIoJB+KV1NOGGdjXgCLh4MAtrKtAMO/
        ugC+urUAvbm0AL25tAC9ubQOv7u2Hb25tACjoJsAraqlAGJfWgA7NzIAUExHAComIXERDQnnCwcC/w0J
        BP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DQkE/woGAf8SDgnuKSUhdkZB
        PgFkYFsAgn55ALm1sAC/u7YAvbm0AL25tBCwq6cdm5iUAI2JhQCcmZQAREE8ACYiHRMnIx6vDAgD/w0J
        BP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w0J
        BP8LBwL/HBcUvVRQSyBYVE8AlZGMALm1sAC+urUAvbm0EKGdmh+Oi4cAko6JAZ6blgBFQT0pCgYCzwsH
        Av8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8KBgH/FxMO3lJOSSaXk44AqaWgAL+7tgC9ubQQsa6qHY+LhwCZlpIAiIWBCBwY
        E80LBwL/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8KBgH/GBQP3n14dB+Wko0At7OuAL66tRCxraoekI2JAKaj
        oAA9OTWbCAQA/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w0JBP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w0JBP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8IBAD/IRwZu3FsawOfm5cAwb24EKmk
        nx6YlZAAUk5KWAcDAP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8QDAf/CgYB/wQAAP8OCgT/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8GAQD/CQUA/xEMCP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8IBAD/OzcyfYaB
        fQC9ubQQtLCrGldTTgoSDgnfDAgD/w4KBf8OCgX/DgoF/w4KBf8OCgX/DQkE/wwIBf+Uk5H/XFlW/wEA
        AP8FAQD/DgoF/w4KBf8HAwD/AAAA/0NAPf+pqKf/GhYS/wwIA/8OCgX/DgoF/w4KBf8OCgX/DgoF/w0J
        BP8RDQnyamViFrSwqwq0r6sORkE+bwgEAP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/AAAA/6qo
        p///////s7Ky/zs4N/8AAAD/AAAA/y4rKf+ko6L//////8rKyf8AAAD/BwIA/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/wcDAP88NzSDr6unA52YlBwbFxPKCwcC/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8AAAD/e3l3////////////+fn5/5STkv+Fg4P/8/Pz//////+ZmJf/ZGNi/19dW/8yLyv/BAAA/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/DQkD/w4KBumHg38hfnl1RwoGAfgOCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/wIAAP9ZVlX/////////////////////////////////lpWT/3d1dP/6+vr///////b2
        9v9SUE7/BQIA/w4KBf8OCgX/DgoF/w4KBf8OCgX/BQEA/2diXltXU096BgIA/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/BwIA/zYyL//7+/v///////////////////////f39/9wbWz/8PDw/0tI
        Rv9ubWv//////+Tk5P8UEA3/CwcC/w4KBf8OCgX/DgoF/w4KBf8FAQD/T0pHlj87N7cHAwD/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8JBQH/FA8M/+Pj4///////////////////////7u3t/399
        e//FxcX/mZeW/3Nxb/9mY2H/9fX1/yUhHf8JBQD/DgoF/w4KBf8OCgX/DgoF/wgEAP81MSzCKCQg4QkF
        Af8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/CwcC/wQBAP+lo6P//f39////////////////////
        ///9/f3/amdl/9jX1////////////6qpqP+ioKD/DAkH/w0JBP8OCgX/DgoF/w4KBf8OCgX/CAQA/y4q
        JdofGxbpCwcC/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/wsHAv8HAwH/nZyc////////////////////
        ///////////////////JyMj/VlNR/6ysq//Ozc3/pKKi/x4bGP8JBgL/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8JBQD/KCQf6R8bFukLBwH/DgoF/w4KBf8OCgX/DgoF/w4KBf8MCAT/CwgH/5aUlP//////////////
        ///////////////////////////////////e3t3/fn18/3Nxcf93dHT/FBAM/wwIA/8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/wkFAP8pJSDqKyYj3gkFAP8OCgX/DgoF/w4KBf8OCgX/DgoF/wUCAf9wbmz/9vb2////
        //////////////////////////////////////////////////////////////////+Jh4X/CQYD/w0J
        BP8OCgX/DgoF/w4KBf8OCgX/CAQA/y4qJtxGQj2xBgIA/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/xgU
        EP8fHBj/NTIv/1RRTv+GhIT/wcC////////////////////////T0tH/jo2N/1hWU/85NjL/Ix4b/xoV
        Ev8PCwb/DgoF/w4KBf8OCgX/DgoF/w4KBf8HAwD/ODQvwldTTnQGAgD/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DQkE/woGAf8HAwD/AwAA/wAAAP8WEg7/6eno/////////////f3+/zczL/8AAAD/AgAA/wcC
        AP8KBgH/DAgD/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/wUBAP9STkmVe3dyQAsHAvYNCQT/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/wAAAP+TkY////////////+vra3/BQIB/w0J
        BP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/BgIA/21pZVmjn5oYIBwXwgoG
        Af8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/CAUB/yonI//w8PD//////zs4
        NP8FAgD/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/wwIA/8RDAnljomGHri0
        rw9STklhBwMA/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8PCgX/AAAA/6Gg
        n//NzMz/BgIB/w4JBP8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/CAQA/z87
        N3urpqICvLiyG4iEfwMhHRjRCgYB/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8HBAH/Ojc0/0ZCQP8GAwH/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/wwI
        A/8UEAvuc29qErezrQvAvLcdnJiTAFxYU0wIBAD/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w8KBf8KBgH/CQUA/w8LBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/BwMA/0M/OnSKhoEAvrq1EMC8tx2qpqEAiIR/ADw4NJEGAgD/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/wcDAP8uKiWxgn55AKejngDAvLcQvrq1Hby4swCdmZQAkY2IBS0pJLsHAwD/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8JBQD/HxsX0YeDfhaalpEAubWwAL66tRC9ubQdv7u2AK+rpgCbl5IAb2tmDycj
        H7QIBAD/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/CgYB/xwYE9BXU04cmJSPAKiknwC/u7YAvbm0EL25tB3Au7YAsK2oAJmW
        kQBwbGcAYV1YByomIpgMCAP/DAgD/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/DAgD/wwIA/8gHBetTEhDE1pWUQCZlZAAuraxAL66tQC9ubQQv7u2Hbi0
        rwCcmZUAmpeTAIWCfgBtaWQAVVBLADUxLFUWEg3WCgYB/wwIA/8NCQT/DgoF/w4KBf8OCgX/DgoF/w4K
        Bf8OCgX/DgoF/w4KBf8OCgX/DAgD/woGAf8UDwvjNDAsYkM/OgBXU04AiYWAALu3sgC+urUAvbm0AL25
        tBC3s64ZmZaSAJWSjgCXlJAAko+LAJGOigCVkY0Acm9qAFxYUwM+OjVXFxMOyggEAPkFAQD/BgIA/wkF
        AP8LBwL/CwcC/wkFAP8IBAD/BgIA/wcDAP0SDgnRNDAsbF5ZVgpraGIAlJCLALayrQDDv7oAvrq1AL25
        tAC9ubQAvbm0DKOgnDObmZUXpKGdGKaknxicmpYYn5yXGK+sqBegnZkYrKmlFJeTjgySj4sXg4B8QWRh
        XXhMSESeMSwpyx4ZFeccGRPoLSkl0jYxLahMSER+dnJtSI2JhBqno54KtrKtE8G9uBfDv7oXv7u2F725
        tBe9ubQXvbm0F725tBe9ubQlAAAAAH8AAP5+AAA+eAAAHlAAAA5gAAAGYAAAAkAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAmAA
        AAZgAAAGcAAADngAAB5+AAB+fwAA/gAAAAA=
</value>
  </data>
</root>